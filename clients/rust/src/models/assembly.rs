/*
 * Fermyon.Cloud.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Assembly {
    #[serde(rename = "definedTypes", skip_serializing_if = "Option::is_none")]
    pub defined_types: Option<Vec<crate::models::TypeInfo>>,
    #[serde(rename = "exportedTypes", skip_serializing_if = "Option::is_none")]
    pub exported_types: Option<Vec<crate::models::Type>>,
    #[serde(rename = "codeBase", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub code_base: Option<Option<String>>,
    #[serde(rename = "entryPoint", skip_serializing_if = "Option::is_none")]
    pub entry_point: Option<Box<crate::models::MethodInfo>>,
    #[serde(rename = "fullName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<Option<String>>,
    #[serde(rename = "imageRuntimeVersion", skip_serializing_if = "Option::is_none")]
    pub image_runtime_version: Option<String>,
    #[serde(rename = "isDynamic", skip_serializing_if = "Option::is_none")]
    pub is_dynamic: Option<bool>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "reflectionOnly", skip_serializing_if = "Option::is_none")]
    pub reflection_only: Option<bool>,
    #[serde(rename = "isCollectible", skip_serializing_if = "Option::is_none")]
    pub is_collectible: Option<bool>,
    #[serde(rename = "isFullyTrusted", skip_serializing_if = "Option::is_none")]
    pub is_fully_trusted: Option<bool>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttributeData>>,
    #[serde(rename = "escapedCodeBase", skip_serializing_if = "Option::is_none")]
    pub escaped_code_base: Option<String>,
    #[serde(rename = "manifestModule", skip_serializing_if = "Option::is_none")]
    pub manifest_module: Option<Box<crate::models::Module>>,
    #[serde(rename = "modules", skip_serializing_if = "Option::is_none")]
    pub modules: Option<Vec<crate::models::Module>>,
    #[serde(rename = "globalAssemblyCache", skip_serializing_if = "Option::is_none")]
    pub global_assembly_cache: Option<bool>,
    #[serde(rename = "hostContext", skip_serializing_if = "Option::is_none")]
    pub host_context: Option<i64>,
    #[serde(rename = "securityRuleSet", skip_serializing_if = "Option::is_none")]
    pub security_rule_set: Option<crate::models::SecurityRuleSet>,
}

impl Assembly {
    pub fn new() -> Assembly {
        Assembly {
            defined_types: None,
            exported_types: None,
            code_base: None,
            entry_point: None,
            full_name: None,
            image_runtime_version: None,
            is_dynamic: None,
            location: None,
            reflection_only: None,
            is_collectible: None,
            is_fully_trusted: None,
            custom_attributes: None,
            escaped_code_base: None,
            manifest_module: None,
            modules: None,
            global_assembly_cache: None,
            host_context: None,
            security_rule_set: None,
        }
    }
}


