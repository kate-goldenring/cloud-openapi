/*
 * Fermyon.Cloud.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EventInfo {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "declaringType", skip_serializing_if = "Option::is_none")]
    pub declaring_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "reflectedType", skip_serializing_if = "Option::is_none")]
    pub reflected_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "module", skip_serializing_if = "Option::is_none")]
    pub module: Option<Box<crate::models::Module>>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttributeData>>,
    #[serde(rename = "isCollectible", skip_serializing_if = "Option::is_none")]
    pub is_collectible: Option<bool>,
    #[serde(rename = "metadataToken", skip_serializing_if = "Option::is_none")]
    pub metadata_token: Option<i32>,
    #[serde(rename = "memberType", skip_serializing_if = "Option::is_none")]
    pub member_type: Option<crate::models::MemberTypes>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<crate::models::EventAttributes>,
    #[serde(rename = "isSpecialName", skip_serializing_if = "Option::is_none")]
    pub is_special_name: Option<bool>,
    #[serde(rename = "addMethod", skip_serializing_if = "Option::is_none")]
    pub add_method: Option<Box<crate::models::MethodInfo>>,
    #[serde(rename = "removeMethod", skip_serializing_if = "Option::is_none")]
    pub remove_method: Option<Box<crate::models::MethodInfo>>,
    #[serde(rename = "raiseMethod", skip_serializing_if = "Option::is_none")]
    pub raise_method: Option<Box<crate::models::MethodInfo>>,
    #[serde(rename = "isMulticast", skip_serializing_if = "Option::is_none")]
    pub is_multicast: Option<bool>,
    #[serde(rename = "eventHandlerType", skip_serializing_if = "Option::is_none")]
    pub event_handler_type: Option<Box<crate::models::Type>>,
}

impl EventInfo {
    pub fn new() -> EventInfo {
        EventInfo {
            name: None,
            declaring_type: None,
            reflected_type: None,
            module: None,
            custom_attributes: None,
            is_collectible: None,
            metadata_token: None,
            member_type: None,
            attributes: None,
            is_special_name: None,
            add_method: None,
            remove_method: None,
            raise_method: None,
            is_multicast: None,
            event_handler_type: None,
        }
    }
}


