/*
 * Fermyon.Cloud.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConstructorInfo {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "declaringType", skip_serializing_if = "Option::is_none")]
    pub declaring_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "reflectedType", skip_serializing_if = "Option::is_none")]
    pub reflected_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "module", skip_serializing_if = "Option::is_none")]
    pub module: Option<Box<crate::models::Module>>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttributeData>>,
    #[serde(rename = "isCollectible", skip_serializing_if = "Option::is_none")]
    pub is_collectible: Option<bool>,
    #[serde(rename = "metadataToken", skip_serializing_if = "Option::is_none")]
    pub metadata_token: Option<i32>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<crate::models::MethodAttributes>,
    #[serde(rename = "methodImplementationFlags", skip_serializing_if = "Option::is_none")]
    pub method_implementation_flags: Option<crate::models::MethodImplAttributes>,
    #[serde(rename = "callingConvention", skip_serializing_if = "Option::is_none")]
    pub calling_convention: Option<crate::models::CallingConventions>,
    #[serde(rename = "isAbstract", skip_serializing_if = "Option::is_none")]
    pub is_abstract: Option<bool>,
    #[serde(rename = "isConstructor", skip_serializing_if = "Option::is_none")]
    pub is_constructor: Option<bool>,
    #[serde(rename = "isFinal", skip_serializing_if = "Option::is_none")]
    pub is_final: Option<bool>,
    #[serde(rename = "isHideBySig", skip_serializing_if = "Option::is_none")]
    pub is_hide_by_sig: Option<bool>,
    #[serde(rename = "isSpecialName", skip_serializing_if = "Option::is_none")]
    pub is_special_name: Option<bool>,
    #[serde(rename = "isStatic", skip_serializing_if = "Option::is_none")]
    pub is_static: Option<bool>,
    #[serde(rename = "isVirtual", skip_serializing_if = "Option::is_none")]
    pub is_virtual: Option<bool>,
    #[serde(rename = "isAssembly", skip_serializing_if = "Option::is_none")]
    pub is_assembly: Option<bool>,
    #[serde(rename = "isFamily", skip_serializing_if = "Option::is_none")]
    pub is_family: Option<bool>,
    #[serde(rename = "isFamilyAndAssembly", skip_serializing_if = "Option::is_none")]
    pub is_family_and_assembly: Option<bool>,
    #[serde(rename = "isFamilyOrAssembly", skip_serializing_if = "Option::is_none")]
    pub is_family_or_assembly: Option<bool>,
    #[serde(rename = "isPrivate", skip_serializing_if = "Option::is_none")]
    pub is_private: Option<bool>,
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(rename = "isConstructedGenericMethod", skip_serializing_if = "Option::is_none")]
    pub is_constructed_generic_method: Option<bool>,
    #[serde(rename = "isGenericMethod", skip_serializing_if = "Option::is_none")]
    pub is_generic_method: Option<bool>,
    #[serde(rename = "isGenericMethodDefinition", skip_serializing_if = "Option::is_none")]
    pub is_generic_method_definition: Option<bool>,
    #[serde(rename = "containsGenericParameters", skip_serializing_if = "Option::is_none")]
    pub contains_generic_parameters: Option<bool>,
    #[serde(rename = "methodHandle", skip_serializing_if = "Option::is_none")]
    pub method_handle: Option<Box<crate::models::RuntimeMethodHandle>>,
    #[serde(rename = "isSecurityCritical", skip_serializing_if = "Option::is_none")]
    pub is_security_critical: Option<bool>,
    #[serde(rename = "isSecuritySafeCritical", skip_serializing_if = "Option::is_none")]
    pub is_security_safe_critical: Option<bool>,
    #[serde(rename = "isSecurityTransparent", skip_serializing_if = "Option::is_none")]
    pub is_security_transparent: Option<bool>,
    #[serde(rename = "memberType", skip_serializing_if = "Option::is_none")]
    pub member_type: Option<crate::models::MemberTypes>,
}

impl ConstructorInfo {
    pub fn new() -> ConstructorInfo {
        ConstructorInfo {
            name: None,
            declaring_type: None,
            reflected_type: None,
            module: None,
            custom_attributes: None,
            is_collectible: None,
            metadata_token: None,
            attributes: None,
            method_implementation_flags: None,
            calling_convention: None,
            is_abstract: None,
            is_constructor: None,
            is_final: None,
            is_hide_by_sig: None,
            is_special_name: None,
            is_static: None,
            is_virtual: None,
            is_assembly: None,
            is_family: None,
            is_family_and_assembly: None,
            is_family_or_assembly: None,
            is_private: None,
            is_public: None,
            is_constructed_generic_method: None,
            is_generic_method: None,
            is_generic_method_definition: None,
            contains_generic_parameters: None,
            method_handle: None,
            is_security_critical: None,
            is_security_safe_critical: None,
            is_security_transparent: None,
            member_type: None,
        }
    }
}


