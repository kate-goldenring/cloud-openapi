/*
 * Fermyon.Cloud.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TypeInfo {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<Vec<crate::models::CustomAttributeData>>,
    #[serde(rename = "isCollectible", skip_serializing_if = "Option::is_none")]
    pub is_collectible: Option<bool>,
    #[serde(rename = "metadataToken", skip_serializing_if = "Option::is_none")]
    pub metadata_token: Option<i32>,
    #[serde(rename = "isInterface", skip_serializing_if = "Option::is_none")]
    pub is_interface: Option<bool>,
    #[serde(rename = "memberType", skip_serializing_if = "Option::is_none")]
    pub member_type: Option<crate::models::MemberTypes>,
    #[serde(rename = "namespace", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<Option<String>>,
    #[serde(rename = "assemblyQualifiedName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assembly_qualified_name: Option<Option<String>>,
    #[serde(rename = "fullName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<Option<String>>,
    #[serde(rename = "assembly", skip_serializing_if = "Option::is_none")]
    pub assembly: Option<Box<crate::models::Assembly>>,
    #[serde(rename = "module", skip_serializing_if = "Option::is_none")]
    pub module: Option<Box<crate::models::Module>>,
    #[serde(rename = "isNested", skip_serializing_if = "Option::is_none")]
    pub is_nested: Option<bool>,
    #[serde(rename = "declaringType", skip_serializing_if = "Option::is_none")]
    pub declaring_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "declaringMethod", skip_serializing_if = "Option::is_none")]
    pub declaring_method: Option<Box<crate::models::MethodBase>>,
    #[serde(rename = "reflectedType", skip_serializing_if = "Option::is_none")]
    pub reflected_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "underlyingSystemType", skip_serializing_if = "Option::is_none")]
    pub underlying_system_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "isTypeDefinition", skip_serializing_if = "Option::is_none")]
    pub is_type_definition: Option<bool>,
    #[serde(rename = "isArray", skip_serializing_if = "Option::is_none")]
    pub is_array: Option<bool>,
    #[serde(rename = "isByRef", skip_serializing_if = "Option::is_none")]
    pub is_by_ref: Option<bool>,
    #[serde(rename = "isPointer", skip_serializing_if = "Option::is_none")]
    pub is_pointer: Option<bool>,
    #[serde(rename = "isConstructedGenericType", skip_serializing_if = "Option::is_none")]
    pub is_constructed_generic_type: Option<bool>,
    #[serde(rename = "isGenericParameter", skip_serializing_if = "Option::is_none")]
    pub is_generic_parameter: Option<bool>,
    #[serde(rename = "isGenericTypeParameter", skip_serializing_if = "Option::is_none")]
    pub is_generic_type_parameter: Option<bool>,
    #[serde(rename = "isGenericMethodParameter", skip_serializing_if = "Option::is_none")]
    pub is_generic_method_parameter: Option<bool>,
    #[serde(rename = "isGenericType", skip_serializing_if = "Option::is_none")]
    pub is_generic_type: Option<bool>,
    #[serde(rename = "isGenericTypeDefinition", skip_serializing_if = "Option::is_none")]
    pub is_generic_type_definition: Option<bool>,
    #[serde(rename = "isSZArray", skip_serializing_if = "Option::is_none")]
    pub is_sz_array: Option<bool>,
    #[serde(rename = "isVariableBoundArray", skip_serializing_if = "Option::is_none")]
    pub is_variable_bound_array: Option<bool>,
    #[serde(rename = "isByRefLike", skip_serializing_if = "Option::is_none")]
    pub is_by_ref_like: Option<bool>,
    #[serde(rename = "hasElementType", skip_serializing_if = "Option::is_none")]
    pub has_element_type: Option<bool>,
    #[serde(rename = "genericTypeArguments", skip_serializing_if = "Option::is_none")]
    pub generic_type_arguments: Option<Vec<crate::models::Type>>,
    #[serde(rename = "genericParameterPosition", skip_serializing_if = "Option::is_none")]
    pub generic_parameter_position: Option<i32>,
    #[serde(rename = "genericParameterAttributes", skip_serializing_if = "Option::is_none")]
    pub generic_parameter_attributes: Option<crate::models::GenericParameterAttributes>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<crate::models::TypeAttributes>,
    #[serde(rename = "isAbstract", skip_serializing_if = "Option::is_none")]
    pub is_abstract: Option<bool>,
    #[serde(rename = "isImport", skip_serializing_if = "Option::is_none")]
    pub is_import: Option<bool>,
    #[serde(rename = "isSealed", skip_serializing_if = "Option::is_none")]
    pub is_sealed: Option<bool>,
    #[serde(rename = "isSpecialName", skip_serializing_if = "Option::is_none")]
    pub is_special_name: Option<bool>,
    #[serde(rename = "isClass", skip_serializing_if = "Option::is_none")]
    pub is_class: Option<bool>,
    #[serde(rename = "isNestedAssembly", skip_serializing_if = "Option::is_none")]
    pub is_nested_assembly: Option<bool>,
    #[serde(rename = "isNestedFamANDAssem", skip_serializing_if = "Option::is_none")]
    pub is_nested_fam_and_assem: Option<bool>,
    #[serde(rename = "isNestedFamily", skip_serializing_if = "Option::is_none")]
    pub is_nested_family: Option<bool>,
    #[serde(rename = "isNestedFamORAssem", skip_serializing_if = "Option::is_none")]
    pub is_nested_fam_or_assem: Option<bool>,
    #[serde(rename = "isNestedPrivate", skip_serializing_if = "Option::is_none")]
    pub is_nested_private: Option<bool>,
    #[serde(rename = "isNestedPublic", skip_serializing_if = "Option::is_none")]
    pub is_nested_public: Option<bool>,
    #[serde(rename = "isNotPublic", skip_serializing_if = "Option::is_none")]
    pub is_not_public: Option<bool>,
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(rename = "isAutoLayout", skip_serializing_if = "Option::is_none")]
    pub is_auto_layout: Option<bool>,
    #[serde(rename = "isExplicitLayout", skip_serializing_if = "Option::is_none")]
    pub is_explicit_layout: Option<bool>,
    #[serde(rename = "isLayoutSequential", skip_serializing_if = "Option::is_none")]
    pub is_layout_sequential: Option<bool>,
    #[serde(rename = "isAnsiClass", skip_serializing_if = "Option::is_none")]
    pub is_ansi_class: Option<bool>,
    #[serde(rename = "isAutoClass", skip_serializing_if = "Option::is_none")]
    pub is_auto_class: Option<bool>,
    #[serde(rename = "isUnicodeClass", skip_serializing_if = "Option::is_none")]
    pub is_unicode_class: Option<bool>,
    #[serde(rename = "isCOMObject", skip_serializing_if = "Option::is_none")]
    pub is_com_object: Option<bool>,
    #[serde(rename = "isContextful", skip_serializing_if = "Option::is_none")]
    pub is_contextful: Option<bool>,
    #[serde(rename = "isEnum", skip_serializing_if = "Option::is_none")]
    pub is_enum: Option<bool>,
    #[serde(rename = "isMarshalByRef", skip_serializing_if = "Option::is_none")]
    pub is_marshal_by_ref: Option<bool>,
    #[serde(rename = "isPrimitive", skip_serializing_if = "Option::is_none")]
    pub is_primitive: Option<bool>,
    #[serde(rename = "isValueType", skip_serializing_if = "Option::is_none")]
    pub is_value_type: Option<bool>,
    #[serde(rename = "isSignatureType", skip_serializing_if = "Option::is_none")]
    pub is_signature_type: Option<bool>,
    #[serde(rename = "isSecurityCritical", skip_serializing_if = "Option::is_none")]
    pub is_security_critical: Option<bool>,
    #[serde(rename = "isSecuritySafeCritical", skip_serializing_if = "Option::is_none")]
    pub is_security_safe_critical: Option<bool>,
    #[serde(rename = "isSecurityTransparent", skip_serializing_if = "Option::is_none")]
    pub is_security_transparent: Option<bool>,
    #[serde(rename = "structLayoutAttribute", skip_serializing_if = "Option::is_none")]
    pub struct_layout_attribute: Option<Box<crate::models::StructLayoutAttribute>>,
    #[serde(rename = "typeInitializer", skip_serializing_if = "Option::is_none")]
    pub type_initializer: Option<Box<crate::models::ConstructorInfo>>,
    #[serde(rename = "typeHandle", skip_serializing_if = "Option::is_none")]
    pub type_handle: Option<Box<crate::models::RuntimeTypeHandle>>,
    #[serde(rename = "guid", skip_serializing_if = "Option::is_none")]
    pub guid: Option<uuid::Uuid>,
    #[serde(rename = "baseType", skip_serializing_if = "Option::is_none")]
    pub base_type: Option<Box<crate::models::Type>>,
    #[serde(rename = "isSerializable", skip_serializing_if = "Option::is_none")]
    pub is_serializable: Option<bool>,
    #[serde(rename = "containsGenericParameters", skip_serializing_if = "Option::is_none")]
    pub contains_generic_parameters: Option<bool>,
    #[serde(rename = "isVisible", skip_serializing_if = "Option::is_none")]
    pub is_visible: Option<bool>,
    #[serde(rename = "genericTypeParameters", skip_serializing_if = "Option::is_none")]
    pub generic_type_parameters: Option<Vec<crate::models::Type>>,
    #[serde(rename = "declaredConstructors", skip_serializing_if = "Option::is_none")]
    pub declared_constructors: Option<Vec<crate::models::ConstructorInfo>>,
    #[serde(rename = "declaredEvents", skip_serializing_if = "Option::is_none")]
    pub declared_events: Option<Vec<crate::models::EventInfo>>,
    #[serde(rename = "declaredFields", skip_serializing_if = "Option::is_none")]
    pub declared_fields: Option<Vec<crate::models::FieldInfo>>,
    #[serde(rename = "declaredMembers", skip_serializing_if = "Option::is_none")]
    pub declared_members: Option<Vec<crate::models::MemberInfo>>,
    #[serde(rename = "declaredMethods", skip_serializing_if = "Option::is_none")]
    pub declared_methods: Option<Vec<crate::models::MethodInfo>>,
    #[serde(rename = "declaredNestedTypes", skip_serializing_if = "Option::is_none")]
    pub declared_nested_types: Option<Vec<crate::models::TypeInfo>>,
    #[serde(rename = "declaredProperties", skip_serializing_if = "Option::is_none")]
    pub declared_properties: Option<Vec<crate::models::PropertyInfo>>,
    #[serde(rename = "implementedInterfaces", skip_serializing_if = "Option::is_none")]
    pub implemented_interfaces: Option<Vec<crate::models::Type>>,
}

impl TypeInfo {
    pub fn new() -> TypeInfo {
        TypeInfo {
            name: None,
            custom_attributes: None,
            is_collectible: None,
            metadata_token: None,
            is_interface: None,
            member_type: None,
            namespace: None,
            assembly_qualified_name: None,
            full_name: None,
            assembly: None,
            module: None,
            is_nested: None,
            declaring_type: None,
            declaring_method: None,
            reflected_type: None,
            underlying_system_type: None,
            is_type_definition: None,
            is_array: None,
            is_by_ref: None,
            is_pointer: None,
            is_constructed_generic_type: None,
            is_generic_parameter: None,
            is_generic_type_parameter: None,
            is_generic_method_parameter: None,
            is_generic_type: None,
            is_generic_type_definition: None,
            is_sz_array: None,
            is_variable_bound_array: None,
            is_by_ref_like: None,
            has_element_type: None,
            generic_type_arguments: None,
            generic_parameter_position: None,
            generic_parameter_attributes: None,
            attributes: None,
            is_abstract: None,
            is_import: None,
            is_sealed: None,
            is_special_name: None,
            is_class: None,
            is_nested_assembly: None,
            is_nested_fam_and_assem: None,
            is_nested_family: None,
            is_nested_fam_or_assem: None,
            is_nested_private: None,
            is_nested_public: None,
            is_not_public: None,
            is_public: None,
            is_auto_layout: None,
            is_explicit_layout: None,
            is_layout_sequential: None,
            is_ansi_class: None,
            is_auto_class: None,
            is_unicode_class: None,
            is_com_object: None,
            is_contextful: None,
            is_enum: None,
            is_marshal_by_ref: None,
            is_primitive: None,
            is_value_type: None,
            is_signature_type: None,
            is_security_critical: None,
            is_security_safe_critical: None,
            is_security_transparent: None,
            struct_layout_attribute: None,
            type_initializer: None,
            type_handle: None,
            guid: None,
            base_type: None,
            is_serializable: None,
            contains_generic_parameters: None,
            is_visible: None,
            generic_type_parameters: None,
            declared_constructors: None,
            declared_events: None,
            declared_fields: None,
            declared_members: None,
            declared_methods: None,
            declared_nested_types: None,
            declared_properties: None,
            implemented_interfaces: None,
        }
    }
}


